[
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "Deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards, not including Jokers\nWhen we initailly create a deck, all of the cards will be present:\n\ndeck = Deck()\ndeck\n\nA♣️;2♣️;3♣️;4♣️;5♣️;6♣️;7♣️;8♣️;9♣️;10♣️;J♣️;Q♣️;K♣️;A♦️;2♦️;3♦️;4♦️;5♦️;6♦️;7♦️;8♦️;9♦️;10♦️;J♦️;Q♦️;K♦️;A❤️;2❤️;3❤️;4❤️;5❤️;6❤️;7❤️;8❤️;9❤️;10❤️;J❤️;Q❤️;K❤️;A♠️;2♠️;3♠️;4♠️;5♠️;6♠️;7♠️;8♠️;9♠️;10♠️;J♠️;Q♠️;K♠️\n\n\nThat should be 52 Cards\n\ntest_eq(len(deck),52)\n\nAs a reminder, these are the suits we defined for a Card:\n\nsuits\n\n['♣️', '♦️', '❤️', '♠️']\n\n\n\nCard(1,1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThis index of the card to remove, defaulting to the last one\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3,13))  # K♠️\n\nThere are 51 cards left in the deck now.\n\ntest_eq(len(deck), 51)\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_first_look.card.Card)\n\nRemoves card from the deck or raises exception if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove\n\n\n\n\ncard23 = Card(2, 3)\ndeck.remove(card23)\n\nassert card23 not in deck\n\n\nsource\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\nShuffles the cards in this deck\n\nsource\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards, with replacement iif replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not draw with replacement\n\n\n\n\ndraw_n(13, replace=False)\n\n[6♣️, 3♣️, 5♠️, 8♠️, 3♠️, 7♠️, A♣️, J❤️, Q♦️, 4♠️, 2♠️, 9♠️, 4♦️]",
    "crumbs": [
      "Deck"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_first_look",
    "section": "",
    "text": "A deck of cards demo of nbdev based on ideas Think Python 2nd Ed.",
    "crumbs": [
      "nbdev_first_look"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "nbdev_first_look",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall nbdev_first_look in Development mode\n# make sure nbdev_first_look package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to nbdev_first_look\n$ nbdev_prepare",
    "crumbs": [
      "nbdev_first_look"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "nbdev_first_look",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/abdulahad/nbdev_first_look.git\nor from conda\n$ conda install -c abdulahad nbdev_first_look\nor from pypi\n$ pip install nbdev_first_look\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "nbdev_first_look"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_first_look",
    "section": "How to use",
    "text": "How to use\nThis will provide a Card class you can use to create, display and compare playing cards.\n\nCard(1,3)\n\n3♦️\n\n\nSuits are numbered according to this list:\n\nsuits\n\n['♣️', '♦️', '❤️', '♠️']",
    "crumbs": [
      "nbdev_first_look"
    ]
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card – A Basic playing card",
    "section": "",
    "text": "We will be using numbers to represent playing card clubs and tanks. These are the suits\n\nranks[1]\n\n'A'\n\n\n\nsource\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into suits\n\n\nrank\nint\nAn index into ranks\n\n\n\n\nc = Card(suit=1, rank=3)\nc\n\n3♦️\n\n\n\n\nComparison operators\nEquality, less than and greater than work on the rank and suit indices:\n\nsource\n\nCard.__gt__\n\n Card.__gt__ (a:__main__.Card)\n\nReturn self&gt;value.\n\nsource\n\n\nCard.__lt__\n\n Card.__lt__ (a:__main__.Card)\n\nReturn self&lt;value.\n\nsource\n\n\nCard.__eq__\n\n Card.__eq__ (a:__main__.Card)\n\nReturn self==value.\nFor instance, here’s some tests for quality\n\ntest_eq(Card(suit=1, rank=3),Card(suit=1, rank=3))\ntest_ne(Card(suit=2, rank=3),Card(suit=1, rank=3))\ntest_ne(Card(suit=1, rank=2),Card(suit=1, rank=3))\n\n… and testing &lt;, &gt; and ==\n\nassert Card(suit=1, rank=3) == Card(suit=1, rank=3)\nassert Card(suit=1, rank=3) &gt; Card(suit=1, rank=2)\nassert Card(suit=1, rank=2) &lt; Card(suit=1, rank=3)",
    "crumbs": [
      "card -- A Basic playing card"
    ]
  }
]